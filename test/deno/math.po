neg -> Num Num
neg x = - 0 x

tail -> [a] [a]
tail xs = !! xs 1 _ xs

empty [Num]
empty = Num []

msort -> [Num] [Num]
msort ns = (msort2 _ ns ns)

# msort2 is a helper for msort #
msort2 -> Num -> [Num] [Num]
msort2 len ns =
  ? <= len 1 ns
  ?? (merge (msort !! ns 0 / len 2) (msort !! ns / len 2 len))

cmpHead -> [Num] -> [Num] {[Num] [Num]}
cmpHead xs ys =
  ? < ! xs 0 0 ! ys 0 0 {xs ys}
  ?? {ys xs}

merge -> [Num] -> [Num] [Num]
merge xs ys =
  ? == 0 _ xs ys
  ? == 0 _ ys xs
  ?? (merge2 (cmpHead xs ys))

merge2 -> {[Num] [Num]} [Num]
merge2 xys = ++ !! @1 xys 0 1 (merge (tail @1 xys) @2 xys)

avg -> Num -> Num Num
avg a b = * 0.5 + a b

mean -> [Num] Num
mean xs = / (sum xs) _ xs

sum -> [Num] Num
sum xs =
  ?  == 0 _ xs 0
  ?? + ! xs 0 0 (sum (tail xs))

compose -> -> b c -> -> a b -> a c
compose f g x = (f (g x))

# this is a comment #
rankPet -> Atom -> Atom {Atom Atom}
rankPet p1 p2 =
  ?  == Chipmunk p1 {p1 p2}
  ?? {p2 p1}



# end comment #


