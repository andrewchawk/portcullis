module TypecheckSpec (spec) where

import Test.Hspec
import Data.Function
import Data.Functor
import Data.Either (isLeft)
import Syntax
import CodeGen
import Parser
import Typecheck
import Compile
import qualified Data.Map as Map


spec :: Spec
spec = do
  describe "pipe checks" $ do

    it "typecheck pipe" $ do
      let add1 = Function { name = "add1"
                          , signature = Arrow NumType NumType
                          , args = ["n"]
                          , body = BinOp Plus (Val $ Number 1) (Ident "n")
                          }
          funcMap = Map.singleton "add1" add1
          queueA = Queue { queueName = "a", buffer = 1, queueSig = NumType }
          queueB = Queue { queueName = "b", buffer = 1, queueSig = NumType }
          pipe = Pipe { funcName = "add1", inQueueNames = ["a"], outQueueName = "b"}

      typeofExpr m func (body func) `shouldBe` Right NumType
      typecheckFunc m func `shouldBe` Right NumType

