neg -> Num Num
neg x = - 0 x

nil AtomType
nil False

empty [Num]
empty = Num []

length -> [a] Num
length xs =
  ? == [] xs 0
  ? T + 1 (length slice 0 (neg 1))

half -> [a] [a]
half xs = slice xs * 0.5 (length)


head -> [a] [a]
head xs = slice xs 0 1

tail -> [a] [a]
tail xs = slice xs 0 (neg 1)

filter -> a -> [a] [a]
filter x xs =
  ? == xs [] []
  ? == [x] (head xs) (tail xs)
  ? T ++ (head xs) (filter x (tail xs))

filter' -> -> [a] AtomType -> [a] [a]
filter' f xs =
  ? == xs [] []
  ? == f (head xs) (tail xs)
  ? T ++ (head xs) (filter x (tail xs))

sort -> [Num] [Num]
sort ns =
  ? < (length ns) 2 ns
  ? T ++ (sort ) (sort )

order -> Num -> Num [Num]
order x y =
  ? < x y Num [x y]
  ? T Num [y x]

merge -> [Num] -> [Num] [Num]
merge xs ys =
  ? == xs (empty) ys
  ? == ys (empty) xs
  ? T ++ (order ! xs 0 0 ! xy 0 0) (merge (tail xs) (tail ys))
